if ("performance" in window) {
                window.loadStart = window.performance.now()
            }
            var tryingReload = false;

            function isSwSetup(state) {
                return state === "installing" || state === "activating";
            }

            window.cleanupReload = function () {
                if (tryingReload) return;
                tryingReload = true;

                var performingReload = false;
                function performReload() {
                    if (performingReload) return;
                    performingReload = true;
                    window.location.reload();
                }

                if ("serviceWorker" in navigator) {
                    var sw = navigator.serviceWorker;
                    if (sw.controller !== null && isSwSetup(sw.controller.state)) {
                        setTimeout(performReload, 2000);
                        try {
                            sw.getRegistrations()
                                .then(function (rs) {
                                    for (var i = 0; i < rs.length; i++) {
                                        rs[i].unregister();
                                    }
                                })
                                .then(performReload)
                                .catch(performReload);
                            return;
                        } catch {}
                    }
                }

                performReload();
            };
            window.showNetworkRetryButton = function () {
                const root = document.getElementById("root");
                if (root !== null) {
                    root.innerHTML = "";
                }
                const r = document.getElementById("reload-area");
                if (r !== null) {
                    r.style.display = "flex";
                } else {
                    setTimeout(() => window.location.reload(), 20000);
                }
            };

            const versionedJavascript = /^\/static\/js\/v[^-]+-(.*)$/;
            function dropCacheForFile(filename) {
                const cacheName =
                    filename === "/" || versionedJavascript.test(filename) ? "runtime-v2" : "same-origin-v2";
                const jsMatch = versionedJavascript.exec(filename);
                const cacheKey = jsMatch === null ? filename : "/static/js/" + jsMatch[1];
                return "caches" in self && self.caches !== undefined
                    ? self.caches.open(cacheName).then(c => c && c.delete(cacheKey))
                    : Promise.resolve();
            }

            window.addEventListener("error", ev => {
                if (!("filename" in ev) || typeof ev.filename !== "string") return;
                if (ev.filename.startsWith("/")) void dropCacheForFile(ev.filename);
                try {
                    const qualifiedFileURL = new URL(ev.filename);
                    if (qualifiedFileURL.origin !== window.origin) return;
                    void dropCacheForFile(qualifiedFileURL.pathname);
                } catch {}
            });

            setTimeout(function () {
                if (window.glidebeacon !== true) {
                    window.showNetworkRetryButton();
                }
            }, 20000);

            if ("serviceWorker" in navigator) {
                var sw = navigator.serviceWorker;
                if (sw.controller !== null) {
                    window.hadEarlySwController = true;
                    setTimeout(function () {
                        if (sw.controller === null) return;
                        if (!isSwSetup(sw.controller.state)) return;
                        if (window.glidebeacon === true) return;

                        if ("sessionStorage" in window) {
                            try {
                                window.sessionStorage.setItem("glide-sw-preboot-error", "yes");
                            } catch {}
                        }

                        window.cleanupReload();
                    }, 4000);
                }
            }
